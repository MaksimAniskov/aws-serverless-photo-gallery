{"version":3,"sources":["data/index.tsx","graphql/queries.ts","components/Note.tsx","utils/index.ts","components/Gallery.tsx","components/FolderCard.tsx","components/ImageCard.tsx","components/Folders.tsx","App.tsx","serviceWorker.js","index.js"],"names":["ActionType","getSignedCookies","reducer","state","action","type","folderName","nextToken","undefined","subfolders","images","hasMoreImages","loading","isLoading","loaded","error","clearError","addImages","concat","StateContext","React","createContext","StateProvider","props","Provider","value","useReducer","children","useContext","useFetchSubfoldersAndSomeImages","context","a","dispatch","performQuery","slice","ListSubfoldersAndImagesQuery","useFetchMoreImages","console","query","params","path","API","graphql","graphqlOperation","result","foldersData","data","listSubfolders","filter","folder","imagesData","listImages","items","item","map","url","Note","className","caption","base64encode","str","btoa","c","i","code","charCodeAt","toString","padStart","join","Gallery","swipe","useState","width","height","windowDimensions","setWindowDimensions","updateWindowDimensions","window","innerWidth","innerHeight","useEffect","addEventListener","removeEventListener","onSwipeMove","position","onSwipeEnd","x","next","prev","handleKeys","onKeyEvent","key","e","length","index","src","generateImageUrl","alt","onNoPhotos","image","imgDimensions","approximateDimension","Math","max","floor","approximateWindowsDimensions","utils","JSON","stringify","edits","resize","fit","preventDefault","history","push","location","pathname","FolderCard","Card","onClick","Body","Text","ImageCard","bg","Img","variant","Folders","subfoldersToDisplay","FOLDER_LEVEL_UP","initialLoad","loadMore","hasMore","loader","CardDeck","subfolder","onChangeFolderIntent","onSwitchToViewingIntent","Amplify","configure","AWS_EXPORTS","App","isSignedIn","setIsSignedIn","hide","Greetings","ConfirmSignIn","SignUp","ConfirmSignUp","TOTPSetup","AUTH_UI_OPTIONS","hideForgotPassword","ForgotPassword","onStateChange","authState","setSignedCookies","id","render","search","decodeURIComponent","newPath","lastIndexOf","encodeURIComponent","parseInt","Auth","signOut","forEach","nameValuePair","cookies","set","name","secure","withCookies","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e413f59.chunk.js","sourcesContent":["import React from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\n// eslint-disable-next-line no-unused-vars\nimport { GraphQLResult } from '@aws-amplify/api/lib/types';\n\n// eslint-disable-next-line no-unused-vars\nimport { ListSubfoldersQuery, ListImagesQuery } from '../API';\nimport { listImages } from '../graphql/queries';\n\ninterface IState {\n    isLoading: boolean,\n    error?: string,\n    folderName?: string,\n    subfolders: string[],\n    images: string[],\n    nextToken?: string,\n    hasMoreImages: boolean\n}\n\nenum ActionType {\n    // eslint-disable-next-line no-unused-vars\n    loading = 'loading',\n    // eslint-disable-next-line no-unused-vars\n    loaded = 'loaded',\n    // eslint-disable-next-line no-unused-vars\n    error = 'error',\n    // eslint-disable-next-line no-unused-vars\n    clearError = 'clearError',\n    // eslint-disable-next-line no-unused-vars\n    folderName = 'folderName',\n    // eslint-disable-next-line no-unused-vars\n    subfolders = 'subfolders',\n    // eslint-disable-next-line no-unused-vars\n    addImages = 'addImages',\n    // eslint-disable-next-line no-unused-vars\n    nextToken = 'nextToken'\n}\n\ntype Action =\n    | {\n        type: ActionType.loading\n    }\n    | {\n        type: ActionType.loaded\n    }\n    | {\n        type: ActionType.error,\n        error: string\n    }\n    | {\n        type: ActionType.clearError\n    }\n    | {\n        type: ActionType.folderName,\n        folderName: string\n    }\n    | {\n        type: ActionType.subfolders,\n        subfolders: string[]\n    }\n    | {\n        type: ActionType.addImages,\n        images: string[]\n    }\n    | {\n        type: ActionType.nextToken,\n        nextToken?: string\n    }\n\ntype Context = [IState, React.Dispatch<Action>];\n\nconst reducer = (state: IState, action: Action): IState => {\n    switch (action.type) {\n        case ActionType.folderName:\n            return {\n                ...state,\n                folderName: action.folderName,\n                nextToken: undefined,\n                subfolders: [],\n                images: [],\n                hasMoreImages: false\n            };\n        case ActionType.loading: return { ...state, isLoading: true };\n        case ActionType.loaded: return { ...state, isLoading: false };\n        case ActionType.error: return { ...state, error: action.error };\n        case ActionType.clearError: return { ...state, error: undefined };\n        case ActionType.subfolders: return { ...state, subfolders: action.subfolders };\n        case ActionType.addImages: return { ...state, images: state.images.concat(action.images) };\n        case ActionType.nextToken:\n            return {\n                ...state,\n                nextToken: action.nextToken,\n                hasMoreImages: !!action.nextToken\n            };\n        default: return state;\n    }\n};\n\nconst StateContext = React.createContext<Context>(null as unknown as Context);\n\nexport const StateProvider: React.FunctionComponent<{}> = (props) => {\n    const initialState: IState = {\n        subfolders: [],\n        images: [],\n        isLoading: false,\n        hasMoreImages: false,\n    };\n    return (\n        <StateContext.Provider\n            value={React.useReducer<React.Reducer<IState, Action>>(reducer, initialState)}\n        >\n            {props.children}\n        </StateContext.Provider>\n    );\n};\n\nexport const useContext = () => React.useContext(StateContext);\n\nexport const useFetchSubfoldersAndSomeImages = async (context: Context, folderName: string) => {\n    const [state, dispatch] = context;\n    if (folderName === state.folderName) {\n        return;\n    }\n    dispatch({ type: ActionType.folderName, folderName });\n    await performQuery(context, folderName.slice(1), ListSubfoldersAndImagesQuery);\n}\n\nexport const useFetchMoreImages = async (context: Context) => {\n    const [state] = context;\n    if (state.isLoading) return;\n    if (!state.folderName) {\n        console.error('Call useFetchSubfoldersAndSomeImages before calling useFetchMoreImages');\n        return;\n    }\n    await performQuery(context, state.folderName.slice(1), listImages);\n}\n\nasync function performQuery(context: Context, folderName: string, query: string) {\n    const [state, dispatch] = context;\n\n    dispatch({ type: ActionType.loading });\n    dispatch({ type: ActionType.clearError });\n\n    try {\n        const params = {\n            path: folderName,\n            nextToken: state.nextToken\n        };\n        const result = await API.graphql(graphqlOperation(query, params)) as GraphQLResult;\n\n        const foldersData = (result.data as ListSubfoldersQuery).listSubfolders;\n        if (foldersData) {\n            dispatch({\n                type: ActionType.subfolders,\n                subfolders: (foldersData as string[]).filter(folder => folder !== '')\n            });\n        }\n\n        const imagesData = (result.data as ListImagesQuery).listImages;\n        if (imagesData) {\n            if (imagesData.items) {\n                dispatch({\n                    type: ActionType.addImages,\n                    images: imagesData.items\n                        .filter(item => !!item)\n                        .map(item => item!.url) as string[]\n                });\n            }\n            dispatch({\n                type: ActionType.nextToken,\n                nextToken: imagesData.nextToken ? imagesData.nextToken : undefined\n            });\n        }\n    } catch (result) {\n        console.error(result);\n        dispatch({ type: ActionType.error, error: 'Oops... Something went wrong.' });\n    } finally {\n        dispatch({ type: ActionType.loaded });\n    }\n}\n\nconst ListSubfoldersAndImagesQuery = `query ListSubfoldersAndImages($path: String) {\n    listSubfolders(path: $path),\n    listImages(path: $path) {\n        items {\n          url\n        }\n        nextToken\n    }\n  }`;\n","// tslint:disable\n// this is an auto generated file. This will be overwritten\n\nexport const listImages = `query ListImages($path: String, $limit: Int, $nextToken: String) {\n  listImages(path: $path, limit: $limit, nextToken: $nextToken) {\n    items {\n      url\n    }\n    nextToken\n  }\n}\n`;\nexport const listSubfolders = `query ListSubfolders($path: String) {\n  listSubfolders(path: $path)\n}\n`;\nexport const getSignedCookies = `query GetSignedCookies {\n  getSignedCookies {\n    name\n    value\n  }\n}\n`;\n","import React from 'react';\n\ninterface Props {\n    caption: string\n}\n\nconst Note: React.FunctionComponent<Props> = (props) => {\n    return (\n        <div className=\"note\">\n            {props.caption}\n        </div>\n    );\n}\n\nexport default Note;\n","export function base64encode(str: string) {\n    return btoa(\n        [...str].map((c, i) => {\n            const code = c.charCodeAt(0);\n            if (code <= 127) {\n                return c;\n            }\n            return '\\\\u' + code.toString(16).padStart(4, '0');\n        }).join(''));\n}\n","import React from 'react';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport Swipe from 'react-easy-swipe';\n\nimport * as data from '../data';\nimport Note from './Note';\n\nimport * as utils from \"../utils\";\n\ninterface Props {\n    path: string,\n    index: number,\n    onNoPhotos?: () => void,\n    history: any\n}\n\nconst Gallery: React.FunctionComponent<Props> = (props) => {\n\n    const context = data.useContext();\n    const [{ isLoading, images, hasMoreImages }] = context;\n\n    const [windowDimensions, setWindowDimensions] = React.useState({ width: 0, height: 0 });\n    React.useEffect(\n        () => {\n            window.addEventListener('resize', updateWindowDimensions);\n            updateWindowDimensions();\n            data.useFetchSubfoldersAndSomeImages(context, props.path);\n\n            return () => {\n                window.removeEventListener('resize', updateWindowDimensions);\n            };\n        },\n        [context, props.path]\n    );\n\n    function updateWindowDimensions() {\n        setWindowDimensions({ width: window.innerWidth, height: window.innerHeight });\n    }\n\n    type TSwipeMove = { x: number };\n    let swipe: TSwipeMove;\n    return (\n        <Swipe\n            onSwipeMove={(position: TSwipeMove) => { swipe = position }}\n            onSwipeEnd={() => swipe.x < 0 ? next() : prev()}\n        >\n            <KeyboardEventHandler handleKeys={['right', 'down', 'pagedown', 'space', 'enter']}\n                onKeyEvent={(key: any, e: React.SyntheticEvent) => next(e)} />\n            < KeyboardEventHandler handleKeys={['left', 'up', 'pageup']}\n                onKeyEvent={(key: any, e: React.SyntheticEvent) => prev(e)} />\n\n            {(() => {\n                if (isLoading) return <Note caption=\"Loading...\" />;\n                if (!images.length) {\n                    props.onNoPhotos && props.onNoPhotos();\n                    return <Note caption=\"No photos\" />;\n                }\n                if (props.index >= images.length) {\n                    return <Note caption=\"The end\" />;\n                } else {\n                    return (\n                        <div>\n                            <img\n                                src={generateImageUrl(images[props.index])}\n                                className=\"center\"\n                                alt={images[props.index]}\n                            />\n\n                            { // Hidden next photo to force caching it upfront\n                                props.index + 1 < images.length &&\n                                <img width=\"0\" height=\"0\"\n                                    src={generateImageUrl(images[props.index+1])}\n                                    alt={''}\n                                />\n                            }\n                            { // Hidden prev photo to force caching it upfront\n                                props.index > 0 &&\n                                <img width=\"0\" height=\"0\"\n                                    src={generateImageUrl(images[props.index-1])}\n                                    alt={''}\n                                />\n                            }\n                        </div>\n                    );\n                }\n            })()}\n        </Swipe>\n    );\n\n    function generateImageUrl(image: string) {\n        const imgDimensions = approximateWindowsDimensions();\n        return '/image/' +\n            utils.base64encode(JSON.stringify({\n                key: image,\n                edits: { resize: { width: imgDimensions.width, height: imgDimensions.height, fit: 'contain' } }\n            }));\n    }\n\n    function prev(e?: React.SyntheticEvent) {\n        e && e.preventDefault();\n        if (props.index > 0) {\n            props.history.push(props.history.location.pathname + '?' + (props.index - 1));\n        }\n    }\n\n    function next(e?: React.SyntheticEvent) {\n        e && e.preventDefault();\n        if (props.index >= images.length) {\n            return;\n        } else if (props.index + 1 >= images.length && hasMoreImages) {\n            data.useFetchMoreImages(context);\n        }\n        props.history.push(props.history.location.pathname + '?' + (props.index + 1));\n    }\n\n    function approximateWindowsDimensions() {\n        return {\n            width: approximateDimension(windowDimensions.width),\n            height: approximateDimension(windowDimensions.height)\n        };\n\n        function approximateDimension(value: number) {\n            return Math.max(100, Math.floor(value / 50) * 50);\n        }\n\n    }\n\n}\n\nexport default Gallery;\n","import React from 'react';\nimport { Card } from \"react-bootstrap\";\n\ninterface Props {\n    folderName: string,\n    onClick: () => void,\n    className?: string\n}\n\nconst FolderCard: React.FunctionComponent<Props> = (props) => {\n    return (\n        <Card onClick={props.onClick} className={props.className}>\n            <Card.Body>\n                <Card.Text>{props.folderName}</Card.Text>\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default FolderCard;","import React from 'react';\nimport { Card } from \"react-bootstrap\";\nimport * as utils from \"../utils\";\n\ninterface Props {\n    url: string,\n    onClick: () => void\n}\n\nconst ImageCard: React.FunctionComponent<Props> = (props) => {\n    return (\n        <Card\n            bg=\"secondary\"\n            onClick={props.onClick}\n        >\n            <Card.Img\n                src={'/image/' + utils.base64encode(JSON.stringify({\n                    key: props.url,\n                    edits: { resize: { width: 240, height: 240 } }\n                }))}\n                variant=\"top\"\n            />\n        </Card>\n    );\n}\n\nexport default ImageCard;\n","import React, { useEffect } from 'react';\nimport { CardDeck } from \"react-bootstrap\";\nimport InfiniteScroll from 'react-infinite-scroller';\n\nimport * as data from '../data';\nimport Note from './Note';\nimport FolderCard from './FolderCard';\nimport ImageCard from './ImageCard';\n\ninterface Props {\n    path: string,\n    onChangeFolderIntent?: (folderName: string) => void,\n    onSwitchToViewingIntent: (index: number) => void\n}\n\nconst Folders: React.FunctionComponent<Props> = (props) => {\n    const context = data.useContext();\n    useEffect(() => {\n        data.useFetchSubfoldersAndSomeImages(context, props.path);\n    });\n\n    const [{ subfolders, isLoading, images, hasMoreImages }] = context;\n    let subfoldersToDisplay = subfolders;\n    if (props.path !== '/') {\n        subfoldersToDisplay = ([FOLDER_LEVEL_UP]).concat(subfolders);\n    }\n\n    return (\n        (isLoading && !hasMoreImages) ?\n            <Note caption=\"Loading...\" />\n            :\n            <InfiniteScroll\n                className=\"folder-browser\"\n                initialLoad={false}\n                loadMore={() => data.useFetchMoreImages(context)}\n                hasMore={hasMoreImages}\n                loader={<Note key={0} caption=\"Loading...\" />}\n            >\n                <CardDeck className=\"folders\">\n                    {subfoldersToDisplay.map(subfolder => (\n                        <FolderCard\n                            className={subfolder === FOLDER_LEVEL_UP ? 'level-up' : undefined}\n                            key={subfolder}\n                            folderName={subfolder}\n                            onClick={() => props && props.onChangeFolderIntent && props.onChangeFolderIntent(subfolder)}\n                        />\n                    ))}\n                </CardDeck>\n                <CardDeck className=\"images\">\n                    {images.map((image, i) => {\n                        return (\n                            <ImageCard\n                                key={image}\n                                url={image}\n                                onClick={() => props.onSwitchToViewingIntent(i)}\n                            />\n                        );\n                    })}\n              </CardDeck>\n            </InfiniteScroll>\n    );\n}\n\nexport default Folders;\n\nexport const FOLDER_LEVEL_UP = '⇖';\n","import React, { useState } from 'react';\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\nimport {\n  Authenticator,\n  Greetings,\n  ConfirmSignIn,\n  SignUp,\n  ConfirmSignUp,\n  TOTPSetup,\n  ForgotPassword\n} from 'aws-amplify-react';\nimport { Menu, Item, Separator, MenuProvider } from 'react-contexify';\nimport 'react-contexify/dist/ReactContexify.min.css';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport { withCookies } from 'react-cookie';\n\nimport { GetSignedCookiesQuery } from './API';\nimport { getSignedCookies } from './graphql/queries';\nimport { GraphQLResult } from '@aws-amplify/api/lib/types';\nimport './App.css';\nimport Gallery from './components/Gallery';\nimport Folders, { FOLDER_LEVEL_UP } from './components/Folders';\nimport Note from './components/Note';\nimport * as data from './data';\n\ndeclare global {\n  interface Window {\n    AWS_EXPORTS: {\n      aws_project_region: string;\n      aws_appsync_graphqlEndpoint: string;\n      aws_appsync_authenticationType: string;\n      aws_user_pools_id:  string;\n      aws_user_pools_web_client_id: string;\n    };\n    AUTH_UI_OPTIONS?: {\n      hideForgotPassword: boolean;\n    };\n  }\n}\nAmplify.configure(window.AWS_EXPORTS);\n\ninterface Props {\n  cookies: any\n}\n\nconst App: React.FunctionComponent<Props> = (props) => {\n\n  const [isSignedIn, setIsSignedIn] = useState<boolean>(false);\n\n  const [{ error }] = data.useContext();\n  if (error) return <Note caption={error} />;\n  return (\n    <Authenticator\n      hide={[\n        Greetings,\n        ConfirmSignIn,\n        SignUp,\n        ConfirmSignUp,\n        TOTPSetup\n      ].concat(window.AUTH_UI_OPTIONS && window.AUTH_UI_OPTIONS.hideForgotPassword ? [ForgotPassword] : [])}\n      onStateChange={async (authState: string) => {\n        if (authState === 'signedIn') {\n          await setSignedCookies();\n          setIsSignedIn(true);\n        }\n      }}\n    >\n      {isSignedIn &&\n        <MenuProvider id=\"menu\">\n          <Router>\n            <Route render={({ history }) => {\n              const path: string = history.location.pathname;\n              if (history.location.search === '?browse') {\n                return (\n                  <Folders\n                    path={decodeURIComponent(path)}\n\n                    onChangeFolderIntent={\n                      (folderName) => {\n                        let newPath: string;\n                        if (folderName === FOLDER_LEVEL_UP) {\n                          newPath = path.slice(0, path.lastIndexOf('/'));\n                          if (newPath === '')\n                            newPath = '/';\n                        } else {\n                          newPath = path;\n                          if (newPath !== '/') {\n                            newPath += '/'\n                          }\n                          newPath += encodeURIComponent(folderName);\n                        }\n                        history.push(newPath + '?browse');\n                      }\n                    }\n\n                    onSwitchToViewingIntent={(index) => history.push(history.location.pathname + '?' + index)}\n                  />\n                )\n              } else {\n                return <Gallery\n                  history={history}\n                  path={decodeURIComponent(path)}\n                  index={history.location.search ? parseInt(history.location.search.slice(1)) : 0}\n                  onNoPhotos={() => history.push(history.location.pathname + '?browse')}\n                />\n              }\n            }} />\n\n            <Route render={({ history }) => (\n              <Menu id=\"menu\">\n                {history.location.search !== '?browse' &&\n                  <Item onClick={() => history.push(history.location.pathname + '?browse')}>\n                    Browse\n                    </Item>\n                }\n                {history.location.search !== '?browse' &&\n                  <Separator />\n                }\n                <Item onClick={() => signOut()}>\n                  Sign out\n                  </Item>\n              </Menu>\n            )} />\n          </Router>\n        </MenuProvider>\n      }\n    </Authenticator>\n  );\n\n  async function setSignedCookies(): Promise<void> {\n    const result = await API.graphql(graphqlOperation(getSignedCookies)) as GraphQLResult;\n    const data: GetSignedCookiesQuery = result.data as GetSignedCookiesQuery;\n\n    if(data.getSignedCookies) {\n      data.getSignedCookies.forEach((nameValuePair) => {\n        if (!nameValuePair) {\n          return;\n        }\n        props.cookies.set(\n          nameValuePair.name,\n          nameValuePair.value,\n          {\n            path: '/image',\n            secure: true\n          }\n        );\n      });\n    }\n  }\n\n  function signOut(): void {\n    Amplify.Auth.signOut();\n    setIsSignedIn(false);\n  }\n\n}\n\nconst AppWithData: React.FunctionComponent<Props> = (props) => {\n  return (\n    <data.StateProvider>\n      <App {...props} />\n    </data.StateProvider>\n\n  );\n}\n\nexport default withCookies(AppWithData);\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n        navigator.serviceWorker.ready.then(() => {\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl)\n    .then(response => {\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}